PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE modules (module_name VARCHAR (255) PRIMARY KEY UNIQUE NOT NULL, module_filename VARCHAR (255) NOT NULL);
CREATE TABLE services (service_name VARCHAR (255) PRIMARY KEY UNIQUE NOT NULL, service_filename VARCHAR (255) NOT NULL);
CREATE TABLE acl_sources (type VARCHAR (255) PRIMARY KEY UNIQUE NOT NULL);
INSERT INTO acl_sources VALUES('constant');
INSERT INTO acl_sources VALUES('module');
INSERT INTO acl_sources VALUES('service');
CREATE TABLE acl_targets (type VARCHAR (255) PRIMARY KEY UNIQUE NOT NULL);
INSERT INTO acl_targets VALUES('constant');
INSERT INTO acl_targets VALUES('signal');
INSERT INTO acl_targets VALUES('event');
INSERT INTO acl_targets VALUES('module');
INSERT INTO acl_targets VALUES('service');
CREATE TABLE acl (source_type REFERENCES acl_sources (type) ON DELETE CASCADE ON UPDATE CASCADE MATCH FULL, source VARCHAR (255) NOT NULL, target_type REFERENCES acl_targets (type) ON DELETE CASCADE ON UPDATE CASCADE MATCH FULL, target VARCHAR (255) NOT NULL);
CREATE TABLE files (filename VARCHAR (512) PRIMARY KEY UNIQUE NOT NULL, data BLOB NOT NULL, hash VARCHAR (255) NOT NULL);
CREATE TABLE exports (property VARCHAR (255) PRIMARY KEY UNIQUE NOT NULL, comment TEXT NOT NULL, options TEXT NOT NULL);
CREATE TABLE config (property VARCHAR (255) PRIMARY KEY UNIQUE NOT NULL, value VARCHAR (255) NOT NULL);
CREATE TABLE autoload_modules (module_name REFERENCES modules (module_name) ON DELETE CASCADE ON UPDATE CASCADE MATCH FULL NOT NULL);
CREATE TABLE events (event VARCHAR (255) NOT NULL, service_name REFERENCES services (service_name) ON DELETE CASCADE ON UPDATE CASCADE MATCH FULL NOT DEFERRABLE, schema TEXT NOT NULL);
CREATE UNIQUE INDEX pidx ON acl (source COLLATE BINARY ASC, target COLLATE BINARY ASC);
CREATE TRIGGER acl_module_chk_update BEFORE UPDATE ON acl FOR EACH ROW WHEN NEW.source_type = 'module'       BEGIN select raise(ABORT, 'modules can`t calls events!') where NEW.target_type = 'event'; END;
CREATE TRIGGER acl_service_chk_update BEFORE UPDATE ON acl FOR EACH ROW WHEN NEW.source_type = 'service' BEGIN select raise(ABORT, 'services can`t calls signals!') where NEW.target_type = 'signal'; END;
CREATE TRIGGER acl_service_chk_insert BEFORE INSERT ON acl FOR EACH ROW WHEN NEW.source_type = 'service'  BEGIN select raise(ABORT, 'services can`t calls signals!') where NEW.target_type = 'signal'; END;
CREATE TRIGGER acl_module_chk_insert BEFORE INSERT ON acl FOR EACH ROW WHEN NEW.source_type = 'module'          BEGIN select raise(ABORT, 'modules can`t calls events!') where NEW.target_type = 'event'; END;
CREATE UNIQUE INDEX event_uq ON events (event COLLATE BINARY ASC, service_name COLLATE BINARY ASC);
COMMIT;
